/**
 * Require the given path.
 *
 * @param {String} path
 * @return {Object} exports
 * @api public
 */

function require(p, parent, orig){
  var path = require.resolve(p)
    , mod = require.modules[path];

  // lookup failed
  if (null == path) {
    orig = orig || p;
    parent = parent || 'root';
    throw new Error('failed to require "' + orig + '" from "' + parent + '"');
  }

  // perform real require()
  // by invoking the module's
  // registered function
  if (!mod.exports) {
    mod.exports = {};
    mod.client = mod.component = true;
    mod.call(this, mod, mod.exports, require.relative(path));
  }

  return mod.exports;
}

/**
 * Registered modules.
 */

require.modules = {};

/**
 * Registered aliases.
 */

require.aliases = {};

/**
 * Resolve `path`.
 *
 * Lookup:
 *
 *   - PATH/index.js
 *   - PATH.js
 *   - PATH
 *
 * @param {String} path
 * @return {String} path or null
 * @api private
 */

require.resolve = function(path){
  var orig = path
    , reg = path + '.js'
    , regJSON = path + '.json'
    , index = path + '/index.js'
    , indexJSON = path + '/index.json';

  return require.modules[reg] && reg
    || require.modules[regJSON] && regJSON
    || require.modules[index] && index
    || require.modules[indexJSON] && indexJSON
    || require.modules[orig] && orig
    || require.aliases[index];
};

/**
 * Normalize `path` relative to the current path.
 *
 * @param {String} curr
 * @param {String} path
 * @return {String}
 * @api private
 */

require.normalize = function(curr, path) {
  var segs = [];

  if ('.' != path.charAt(0)) return path;

  curr = curr.split('/');
  path = path.split('/');

  for (var i = 0; i < path.length; ++i) {
    if ('..' == path[i]) {
      curr.pop();
    } else if ('.' != path[i] && '' != path[i]) {
      segs.push(path[i]);
    }
  }

  return curr.concat(segs).join('/');
};

/**
 * Register module at `path` with callback `fn`.
 *
 * @param {String} path
 * @param {Function} fn
 * @api private
 */

require.register = function(path, fn){
  require.modules[path] = fn;
};

/**
 * Alias a module definition.
 *
 * @param {String} from
 * @param {String} to
 * @api private
 */

require.alias = function(from, to){
  var fn = require.modules[from];
  if (!fn) throw new Error('failed to alias "' + from + '", it does not exist');
  require.aliases[to] = from;
};

/**
 * Return a require function relative to the `parent` path.
 *
 * @param {String} parent
 * @return {Function}
 * @api private
 */

require.relative = function(parent) {
  var p = require.normalize(parent, '..');

  /**
   * lastIndexOf helper.
   */

  function lastIndexOf(arr, obj){
    var i = arr.length;
    while (i--) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  /**
   * The relative require() itself.
   */

  function fn(path){
    var orig = path;
    path = fn.resolve(path);
    return require(path, parent, orig);
  }

  /**
   * Resolve relative to the parent.
   */

  fn.resolve = function(path){
    // resolve deps by returning
    // the dep in the nearest "deps"
    // directory
    if ('.' != path.charAt(0)) {
      var segs = parent.split('/');
      var i = lastIndexOf(segs, 'deps') + 1;
      if (!i) i = 0;
      path = segs.slice(0, i + 1).join('/') + '/deps/' + path;
      return path;
    }
    return require.normalize(p, path);
  };

  /**
   * Check if module is defined at `path`.
   */

  fn.exists = function(path){
    return !! require.modules[fn.resolve(path)];
  };

  return fn;
};require.register("godmodelabs-span/index.js", function(module, exports, require){
var intervals = {
  YEAR: 31557600000, 
  WEEK: 604800000,
  DAY: 86400000,
  HOUR: 3600000,
  MINUTE: 60000,
  SECOND: 1000,
  MILLISECOND: 1
}

function span(val) {
  if (typeof val == 'number' || val == parseInt(val, 10)) return str(val);
  return ms(val);
};

function ms(str) {
  var date = parseDate(str);
  var ms = 0;
  for (var type in date) {
    if (type == 'ms') ms += date[type];
    if (type == 's') ms += date[type] * intervals.SECOND;
    if (type == 'm') ms += date[type] * intervals.MINUTE;
    if (type == 'h') ms += date[type] * intervals.HOUR;
    if (type == 'd') ms += date[type] * intervals.DAY;
    if (type == 'w') ms += date[type] * intervals.WEEK;
    if (type == 'y') ms += date[type] * intervals.YEAR;
  }
  return ms;
}

function str(ms) {
  var output = [];
  var buf;
  for (var i in intervals) {
    if (ms>=intervals[i]) {
      buf = Math.floor(ms/intervals[i]);
      if (i!='MILLISECOND') {
        output.push(buf+i.substr(0,1).toLowerCase());
      } else if (!output.length) {
        output.push(buf+'ms');
      }
      ms -= buf*intervals[i];
    }
  }
  return output.join(' ');
}

function parseDate(str) {
  var str = str.replace(/ /g, '');
  
  if (str.search('in') > -1) return parseRelative(str);
  if (str.search(':') > -1) throw 'Absolute date parsing not yet implemented';
  return parseRelative(str);
}

function parseRelative(str) {
  var str = str
    .replace(/in/, '')
    .replace(/years|year|jahr|jahre|y|j/, 'y')
    .replace(/weeks|week|wochen|woche/, 'w')
    .replace(/days|day|tage|tag/, 'd')
    .replace(/hours|hour|stunden|stunde/, 'h')
    .replace(/minutes|minute|mins|min|minuten/, 'm')
    .replace(/seconds|second|secs|sec|sekunden|sekunde|sek/, 's')

  var duration = 0;
  var date = {};
  var numBuffer = [];
  for (var i = 0; i < str.length; i++) {
    if (str.charCodeAt(i) < 97) {
      numBuffer.push(str[i]);
    } else {
      date[str[i]] = parseInt(numBuffer.join(''), 10);
      numBuffer = [];
    };
  }
  return date;
}

module.exports = span;

});
require.register("ts/index.js", function(module, exports, require){
var span = require('span')

module.exports = timestamp

function timestamp (ts) {
  ts *= 1000
  var dt = Date.now() - ts
  return [
    new Date(ts).toString(),
    ' (',
    span(Math.abs(dt)),
    ' ',
    dt > 0? 'ago' : 'ahead',
    ')'
  ].join('')
} 

});
require.alias("godmodelabs-span/index.js", "ts/deps/span/index.js");
